
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\003\010\000\002\004\005" +
    "\000\002\004\003\000\002\005\004\000\002\006\006\000" +
    "\002\007\004\000\002\007\003\000\002\007\002\000\002" +
    "\010\005\000\002\011\003\000\002\011\003\000\002\011" +
    "\006\000\002\012\005\000\002\012\004\000\002\013\011" +
    "\000\002\013\007\000\002\013\007\000\002\013\005\000" +
    "\002\013\004\000\002\013\006\000\002\013\003\000\002" +
    "\013\004\000\002\013\004\000\002\014\003\000\002\014" +
    "\006\000\002\015\003\000\002\015\005\000\002\015\004" +
    "\000\002\015\005\000\002\015\003\000\002\015\006\000" +
    "\002\015\003\000\002\015\004\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\005\000" +
    "\002\020\003\000\002\020\002\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\010\002\ufffe\004\ufffe\010\ufffe\001\002\000" +
    "\010\002\011\004\012\010\010\001\002\000\010\002\uffff" +
    "\004\uffff\010\uffff\001\002\000\010\002\001\004\001\010" +
    "\001\001\002\000\006\024\013\037\014\001\002\000\006" +
    "\024\ufff3\037\ufff3\001\002\000\004\002\000\001\002\000" +
    "\006\024\ufff4\037\ufff4\001\002\000\020\013\050\022\054" +
    "\033\047\036\056\037\061\041\060\042\052\001\002\000" +
    "\006\022\016\030\015\001\002\000\026\002\ufff5\004\ufff5" +
    "\005\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\026" +
    "\ufff5\037\ufff5\001\002\000\006\004\012\010\010\001\002" +
    "\000\006\023\024\031\023\001\002\000\006\024\013\037" +
    "\022\001\002\000\006\023\ufffb\031\ufffb\001\002\000\006" +
    "\023\ufffa\031\ufffa\001\002\000\006\004\012\010\010\001" +
    "\002\000\004\026\025\001\002\000\024\004\012\005\ufff6" +
    "\007\ufff6\010\010\011\ufff6\012\ufff6\014\ufff6\026\ufff6\037" +
    "\ufff6\001\002\000\010\002\ufffd\004\ufffd\010\ufffd\001\002" +
    "\000\006\024\013\037\135\001\002\000\024\004\ufff7\005" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\026\ufff7" +
    "\037\ufff7\001\002\000\024\004\012\005\036\007\043\010" +
    "\010\011\041\012\032\014\033\026\025\037\045\001\002" +
    "\000\004\037\111\001\002\000\004\022\130\001\002\000" +
    "\006\017\126\024\105\001\002\000\006\006\uffe9\030\uffe9" +
    "\001\002\000\004\022\120\001\002\000\022\005\036\007" +
    "\043\011\041\012\032\014\033\026\025\027\116\037\045" +
    "\001\002\000\004\030\114\001\002\000\020\013\050\022" +
    "\054\033\047\036\056\037\061\041\060\042\052\001\002" +
    "\000\024\004\ufff8\005\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\014\ufff8\026\ufff8\037\ufff8\001\002\000\020\013\050" +
    "\022\054\033\047\036\056\037\061\041\060\042\052\001" +
    "\002\000\040\006\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\023\uffe6\024\uffe6\025\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\001\002\000\010\017\uffcf" +
    "\022\046\024\uffcf\001\002\000\024\013\050\022\054\023" +
    "\uffd0\031\uffd0\033\047\036\056\037\061\041\060\042\052" +
    "\001\002\000\020\013\uffd4\022\uffd4\033\uffd4\036\uffd4\037" +
    "\uffd4\041\uffd4\042\uffd4\001\002\000\004\037\111\001\002" +
    "\000\036\006\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4\023" +
    "\uffe4\024\105\025\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\001\002\000\034\006\uffe0\015\uffe0\016" +
    "\uffe0\020\uffe0\021\uffe0\023\uffe0\025\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\001\002\000\026\015" +
    "\073\016\072\020\071\021\076\023\uffd1\031\uffd1\032\074" +
    "\033\067\034\077\035\070\001\002\000\020\013\050\022" +
    "\054\033\047\036\056\037\061\041\060\042\052\001\002" +
    "\000\006\023\102\031\064\001\002\000\020\013\uffd3\022" +
    "\uffd3\033\uffd3\036\uffd3\037\uffd3\041\uffd3\042\uffd3\001\002" +
    "\000\020\013\050\022\054\033\047\036\056\037\061\041" +
    "\060\042\052\001\002\000\034\006\uffde\015\uffde\016\uffde" +
    "\020\uffde\021\uffde\023\uffde\025\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\001\002\000\040\006\uffcf" +
    "\015\uffcf\016\uffcf\020\uffcf\021\uffcf\022\062\023\uffcf\024" +
    "\uffcf\025\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\001\002\000\024\013\050\022\054\023\uffd0\031" +
    "\uffd0\033\047\036\056\037\061\041\060\042\052\001\002" +
    "\000\006\023\065\031\064\001\002\000\020\013\050\022" +
    "\054\033\047\036\056\037\061\041\060\042\052\001\002" +
    "\000\034\006\uffdf\015\uffdf\016\uffdf\020\uffdf\021\uffdf\023" +
    "\uffdf\025\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\001\002\000\026\015\073\016\072\020\071\021" +
    "\076\023\uffd2\031\uffd2\032\074\033\067\034\077\035\070" +
    "\001\002\000\020\013\uffdc\022\uffdc\033\uffdc\036\uffdc\037" +
    "\uffdc\041\uffdc\042\uffdc\001\002\000\020\013\uffd9\022\uffd9" +
    "\033\uffd9\036\uffd9\037\uffd9\041\uffd9\042\uffd9\001\002\000" +
    "\020\013\uffd6\022\uffd6\033\uffd6\036\uffd6\037\uffd6\041\uffd6" +
    "\042\uffd6\001\002\000\020\013\uffd7\022\uffd7\033\uffd7\036" +
    "\uffd7\037\uffd7\041\uffd7\042\uffd7\001\002\000\020\013\uffd8" +
    "\022\uffd8\033\uffd8\036\uffd8\037\uffd8\041\uffd8\042\uffd8\001" +
    "\002\000\020\013\uffdb\022\uffdb\033\uffdb\036\uffdb\037\uffdb" +
    "\041\uffdb\042\uffdb\001\002\000\020\013\050\022\054\033" +
    "\047\036\056\037\061\041\060\042\052\001\002\000\020" +
    "\013\uffd5\022\uffd5\033\uffd5\036\uffd5\037\uffd5\041\uffd5\042" +
    "\uffd5\001\002\000\020\013\uffda\022\uffda\033\uffda\036\uffda" +
    "\037\uffda\041\uffda\042\uffda\001\002\000\034\006\uffe3\015" +
    "\073\016\072\020\071\021\076\023\uffe3\025\uffe3\030\uffe3" +
    "\031\uffe3\032\074\033\067\034\077\035\070\001\002\000" +
    "\034\006\uffe2\015\073\016\072\020\071\021\076\023\uffe2" +
    "\025\uffe2\030\uffe2\031\uffe2\032\074\033\067\034\077\035" +
    "\070\001\002\000\006\006\uffea\030\uffea\001\002\000\024" +
    "\015\073\016\072\020\071\021\076\023\104\032\074\033" +
    "\067\034\077\035\070\001\002\000\034\006\uffe1\015\uffe1" +
    "\016\uffe1\020\uffe1\021\uffe1\023\uffe1\025\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\001\002\000\020" +
    "\013\050\022\054\033\047\036\056\037\061\041\060\042" +
    "\052\001\002\000\024\015\073\016\072\020\071\021\076" +
    "\025\107\032\074\033\067\034\077\035\070\001\002\000" +
    "\040\006\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\001\002\000\036\006\uffdd\015\uffdd" +
    "\016\uffdd\020\uffdd\021\uffdd\023\uffdd\024\105\025\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\001\002" +
    "\000\036\006\uffcf\015\uffcf\016\uffcf\020\uffcf\021\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\001\002\000\026\006\uffeb\015\073\016" +
    "\072\020\071\021\076\030\uffeb\032\074\033\067\034\077" +
    "\035\070\001\002\000\026\006\uffe8\015\073\016\072\020" +
    "\071\021\076\030\uffe8\032\074\033\067\034\077\035\070" +
    "\001\002\000\022\005\ufff0\007\ufff0\011\ufff0\012\ufff0\014" +
    "\ufff0\026\ufff0\027\ufff0\037\ufff0\001\002\000\004\030\117" +
    "\001\002\000\014\002\ufff9\004\ufff9\006\ufff9\010\ufff9\030" +
    "\ufff9\001\002\000\022\005\ufff1\007\ufff1\011\ufff1\012\ufff1" +
    "\014\ufff1\026\ufff1\027\ufff1\037\ufff1\001\002\000\020\013" +
    "\050\022\054\033\047\036\056\037\061\041\060\042\052" +
    "\001\002\000\024\015\073\016\072\020\071\021\076\023" +
    "\122\032\074\033\067\034\077\035\070\001\002\000\020" +
    "\005\036\007\043\011\041\012\032\014\033\026\025\037" +
    "\045\001\002\000\006\006\124\030\uffee\001\002\000\020" +
    "\005\036\007\043\011\041\012\032\014\033\026\025\037" +
    "\045\001\002\000\006\006\uffef\030\uffef\001\002\000\020" +
    "\013\050\022\054\033\047\036\056\037\061\041\060\042" +
    "\052\001\002\000\026\006\uffec\015\073\016\072\020\071" +
    "\021\076\030\uffec\032\074\033\067\034\077\035\070\001" +
    "\002\000\020\013\050\022\054\033\047\036\056\037\061" +
    "\041\060\042\052\001\002\000\024\015\073\016\072\020" +
    "\071\021\076\023\132\032\074\033\067\034\077\035\070" +
    "\001\002\000\020\005\036\007\043\011\041\012\032\014" +
    "\033\026\025\037\045\001\002\000\006\006\uffed\030\uffed" +
    "\001\002\000\010\006\uffe7\024\105\030\uffe7\001\002\000" +
    "\004\030\015\001\002\000\006\023\ufffc\031\ufffc\001\002" +
    "\000\024\015\073\016\072\020\071\021\076\025\140\032" +
    "\074\033\067\034\077\035\070\001\002\000\006\024\ufff2" +
    "\037\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\004\002\003\001\001\000\010\003\004\010" +
    "\005\011\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\050\015\136\017\056\021\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\016\005\020\011\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\135\011\017\001\001\000\004\006\025\001\001\000\010" +
    "\007\030\010\027\011\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\034\010\041" +
    "\011\026\012\036\013\037\014\033\021\043\001\001\000" +
    "\006\014\133\021\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\034\013\114\014\033\021\043\001\001\000\002\001\001" +
    "\000\012\014\050\015\112\017\056\021\043\001\001\000" +
    "\002\001\001\000\012\014\050\015\111\017\056\021\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\014" +
    "\050\015\052\017\056\020\054\021\043\001\001\000\002" +
    "\001\001\000\006\014\107\021\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\074\001\001\000\012" +
    "\014\050\015\102\017\056\021\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\050\015\100\017\056" +
    "\021\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\050\015\052\017\056\020\062\021\043\001\001" +
    "\000\002\001\001\000\012\014\050\015\065\017\056\021" +
    "\043\001\001\000\002\001\001\000\004\016\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\050\015\077\017\056\021\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\074\001\001\000\004" +
    "\016\074\001\001\000\002\001\001\000\004\016\074\001" +
    "\001\000\002\001\001\000\012\014\050\015\105\017\056" +
    "\021\043\001\001\000\004\016\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\074" +
    "\001\001\000\004\016\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\050\015\120\017\056\021\043\001\001\000\004\016" +
    "\074\001\001\000\012\006\034\013\122\014\033\021\043" +
    "\001\001\000\002\001\001\000\012\006\034\013\124\014" +
    "\033\021\043\001\001\000\002\001\001\000\012\014\050" +
    "\015\126\017\056\021\043\001\001\000\004\016\074\001" +
    "\001\000\012\014\050\015\130\017\056\021\043\001\001" +
    "\000\004\016\074\001\001\000\012\006\034\013\132\014" +
    "\033\021\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\074\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;
  protected MultiTree syntaxTree = new MultiTree();

	public MultiTree getSyntaxTree()
	{
		return syntaxTree;
 	}
	protected MultiTreeNode createFunctionDeclarationNode(MultiTreeNode typeSpecifier, String name, MultiTreeNode paramsList, MultiTreeNode block){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createListNode(String listName, MultiTreeNode firstChild){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createVarDeclaration(MultiTreeNode typeSpecifier, String identifierName){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createTypeSpecifier(String typeName){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createTypeSpecifier(MultiTreeNode type,MultiTreeNode expression){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createBlock(MultiTreeNode declarations, MultiTreeNode instructions){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createIfStatement(MultiTreeNode condition, MultiTreeNode ifInstructions, MultiTreeNode elseInstructions){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createStatementList(String indicator, String name, MultiTreeNode stm){ throw new UnsupportedOperationException();} 	
	protected MultiTreeNode createStatement(String name, MultiTreeNode ex, MultiTreeNode stm){ throw new UnsupportedOperationException();} 	
	protected MultiTreeNode createReturnStatement(MultiTreeNode exp){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createBlockStatement(MultiTreeNode exp){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createInOutStatement(String ioOP, MultiTreeNode exp){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createLExpression(MultiTreeNode lexp, MultiTreeNode exp){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createExpression(MultiTreeNode lexp, MultiTreeNode operation,MultiTreeNode ex){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createUExpression(MultiTreeNode operation,MultiTreeNode ex){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createInstance(Integer instance){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createInstance(String instance){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createOperation(String operation){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createVariable(String name){ throw new UnsupportedOperationException();}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program var_declaration 
            {
              MultiTreeNode RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode p = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location var_dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location var_dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode var_d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 RESULT = p; syntaxTree.addChildNode(var_d);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode start_val = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program fun_declaration 
            {
              MultiTreeNode RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode p = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location fn_dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fn_dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fn_d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4
 RESULT = p; syntaxTree.addChildNode(fn_d);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG5
 RESULT = syntaxTree.create("Program");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fun_declaration ::= type NAME LPAR param_list RPAR block 
            {
              MultiTreeNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		MultiTreeNode t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location for_parxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location for_parxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode for_par = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location blkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode blk = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
RESULT = createFunctionDeclarationNode(t,name,for_par,blk);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // param_list ::= param_list COMMA formal_par 
            {
              MultiTreeNode RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode pl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location fpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fp = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
RESULT = pl;RESULT.addChild(fp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // param_list ::= formal_par 
            {
              MultiTreeNode RESULT =null;
		Location fpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fp = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
RESULT = createListNode("Parameter List", fp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formal_par ::= type NAME 
            {
              MultiTreeNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9
RESULT = createVarDeclaration(t,name);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_par",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // block ::= LBRACE var_delcaration_list statements RBRACE 
            {
              MultiTreeNode RESULT =null;
		Location vadlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vadlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode vadl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode st = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG10
RESULT = createBlock(vadl,st);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_delcaration_list ::= var_delcaration_list var_declaration 
            {
              MultiTreeNode RESULT =null;
		Location vadlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vadlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode vadl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location vadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode vad = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
RESULT = vadl;RESULT.addChild(vad);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_delcaration_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_delcaration_list ::= var_declaration 
            {
              MultiTreeNode RESULT =null;
		Location vadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode vad = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG12
RESULT = createListNode("VarDeclarations",vad);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_delcaration_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_delcaration_list ::= 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG13
RESULT = createListNode("VarDeclarations",null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_delcaration_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_declaration ::= type NAME SEMICOLON 
            {
              MultiTreeNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG14
RESULT = createVarDeclaration(t,name);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= INT 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG15
RESULT = createTypeSpecifier("INT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= CHAR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG16
RESULT = createTypeSpecifier("CHAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= type LBRACK exp RBRACK 
            {
              MultiTreeNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		MultiTreeNode t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG17
RESULT = createTypeSpecifier(t,ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statements ::= statements statement SEMICOLON 
            {
              MultiTreeNode RESULT =null;
		Location stmsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stmsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode stms = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode stm = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG18
RESULT = stms;RESULT.addChild(stm);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statements ::= statement SEMICOLON 
            {
              MultiTreeNode RESULT =null;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode stm = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG19
RESULT = createListNode("Statements",stm);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= IF LPAR exp RPAR statement ELSE statement 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode stm = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stm1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stm1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode stm1 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG20
RESULT = createIfStatement(ex,stm,stm1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= IF LPAR exp RPAR statement 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode stm = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21
RESULT = createIfStatement(ex,stm,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= WHILE LPAR exp RPAR statement 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode stm = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22
RESULT = createStatement("WHILE",ex,stm);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= lexp ASSIGN exp 
            {
              MultiTreeNode RESULT =null;
		Location lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode lex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23
RESULT = createStatement("Assign",lex,ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= RETURN exp 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
RESULT = createReturnStatement(ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= NAME LPAR exp_list RPAR 
            {
              MultiTreeNode RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode exl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG25
RESULT = createStatementList("StatementList",name,exl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= block 
            {
              MultiTreeNode RESULT =null;
		Location blkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode blk = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26
RESULT = createBlockStatement(blk);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= WRITE exp 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
RESULT = createInOutStatement("WRITE",ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= READ lexp 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
RESULT = createInOutStatement("READ",ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lexp ::= var 
            {
              MultiTreeNode RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode v = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29
RESULT = createLExpression(v,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lexp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lexp ::= lexp LBRACK exp RBRACK 
            {
              MultiTreeNode RESULT =null;
		Location lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		MultiTreeNode lex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG30
RESULT = createLExpression(lex,ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lexp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= lexp 
            {
              MultiTreeNode RESULT =null;
		Location lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode lex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG31
RESULT = createExpression(lex,null,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp binop exp 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode bop = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ex1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ex1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ex1 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32
RESULT = createExpression(ex,bop,ex1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= unop exp 
            {
              MultiTreeNode RESULT =null;
		Location uopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location uopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode uop = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33
RESULT = createUExpression(uop,ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= LPAR exp RPAR 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG34
RESULT = createExpression(ex, null,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= NUMBER 
            {
              MultiTreeNode RESULT =null;
		Location numberxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location numberxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG35
RESULT = createInstance(number);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= NAME LPAR exp_list RPAR 
            {
              MultiTreeNode RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode exl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG36
RESULT = createStatementList("ExpressionList",name,exl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= QCHAR 
            {
              MultiTreeNode RESULT =null;
		Location qcharxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location qcharxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String qchar = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37
RESULT = createInstance(qchar);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= LENGTH lexp 
            {
              MultiTreeNode RESULT =null;
		Location lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode lex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
RESULT = createUExpression(null,lex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // binop ::= MINUS 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG39
RESULT = createOperation("MINUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // binop ::= PLUS 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG40
RESULT = createOperation("PLUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // binop ::= TIMES 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG41
RESULT = createOperation("TIMES");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // binop ::= DIVIDE 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG42
RESULT = createOperation("DIVIDE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // binop ::= EQUAL 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG43
RESULT = createOperation("EQUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // binop ::= NEQUAL 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG44
RESULT = createOperation("NEQUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // binop ::= GREATER 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG45
RESULT = createOperation("GREATER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // binop ::= LESS 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG46
RESULT = createOperation("LESS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unop ::= MINUS 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG47
RESULT = createOperation("MINUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unop ::= NOT 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG48
RESULT = createOperation("NOT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp_list ::= exp_list COMMA exp 
            {
              MultiTreeNode RESULT =null;
		Location exlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode exl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG49
RESULT = exl; RESULT.addChild(ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp_list ::= exp 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG50
RESULT = createListNode("VarDeclarations",ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp_list ::= 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG51
RESULT = createListNode("VarDeclarations",null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var ::= NAME 
            {
              MultiTreeNode RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52
RESULT = createVariable(name);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
