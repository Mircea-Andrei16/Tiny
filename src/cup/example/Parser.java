
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\003\010\000\002\004\005" +
    "\000\002\004\003\000\002\005\004\000\002\006\006\000" +
    "\002\007\004\000\002\007\002\000\002\007\004\000\002" +
    "\010\005\000\002\011\003\000\002\011\003\000\002\011" +
    "\006\000\002\012\004\000\002\012\002\000\002\013\011" +
    "\000\002\013\007\000\002\013\007\000\002\013\006\000" +
    "\002\013\005\000\002\013\007\000\002\013\003\000\002" +
    "\013\005\000\002\013\005\000\002\014\003\000\002\014" +
    "\006\000\002\014\004\000\002\015\003\000\002\015\005" +
    "\000\002\015\004\000\002\015\005\000\002\015\003\000" +
    "\002\015\006\000\002\015\003\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\005\000\002" +
    "\020\003\000\002\020\002\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\010\002\ufffe\004\ufffe\010\ufffe\001\002\000" +
    "\010\002\011\004\012\010\010\001\002\000\010\002\uffff" +
    "\004\uffff\010\uffff\001\002\000\010\002\001\004\001\010" +
    "\001\001\002\000\006\024\013\037\014\001\002\000\006" +
    "\024\ufff3\037\ufff3\001\002\000\004\002\000\001\002\000" +
    "\006\024\ufff4\037\ufff4\001\002\000\024\003\060\013\053" +
    "\021\042\022\057\033\052\036\062\037\065\041\064\042" +
    "\055\001\002\000\006\022\016\030\015\001\002\000\032" +
    "\002\ufff5\004\ufff5\005\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\014\ufff5\021\ufff5\026\ufff5\027\ufff5\037\ufff5\001\002" +
    "\000\006\004\012\010\010\001\002\000\006\023\024\031" +
    "\023\001\002\000\006\024\013\037\022\001\002\000\006" +
    "\023\ufffb\031\ufffb\001\002\000\006\023\ufffa\031\ufffa\001" +
    "\002\000\006\004\012\010\010\001\002\000\004\026\025" +
    "\001\002\000\032\003\027\004\ufff7\005\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\014\ufff7\021\ufff7\026\ufff7\027\ufff7" +
    "\037\ufff7\001\002\000\010\002\ufffd\004\ufffd\010\ufffd\001" +
    "\002\000\004\030\145\001\002\000\030\004\012\005\ufff0" +
    "\007\ufff0\010\010\011\ufff0\012\ufff0\014\ufff0\021\ufff0\026" +
    "\ufff0\027\ufff0\037\ufff0\001\002\000\024\005\041\007\045" +
    "\011\044\012\035\014\036\021\042\026\025\027\046\037" +
    "\050\001\002\000\030\004\ufff8\005\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\014\ufff8\021\ufff8\026\ufff8\027\ufff8\037" +
    "\ufff8\001\002\000\006\024\013\037\034\001\002\000\004" +
    "\030\015\001\002\000\006\021\042\037\120\001\002\000" +
    "\004\022\137\001\002\000\006\017\134\024\114\001\002" +
    "\000\026\005\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9\014" +
    "\uffe9\021\uffe9\026\uffe9\027\uffe9\037\uffe9\001\002\000\004" +
    "\022\126\001\002\000\004\003\125\001\002\000\024\005" +
    "\ufff1\007\ufff1\011\ufff1\012\ufff1\014\ufff1\021\ufff1\026\ufff1" +
    "\027\ufff1\037\ufff1\001\002\000\024\003\060\013\053\021" +
    "\042\022\057\033\052\036\062\037\065\041\064\042\055" +
    "\001\002\000\024\003\060\013\053\021\042\022\057\033" +
    "\052\036\062\037\065\041\064\042\055\001\002\000\034" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\014\ufff9\021\ufff9\026\ufff9\027\ufff9\037\ufff9" +
    "\001\002\000\036\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\001\002\000\010\017\uffcc\022" +
    "\051\024\uffcc\001\002\000\030\003\060\013\053\021\042" +
    "\022\057\023\uffcd\031\uffcd\033\052\036\062\037\065\041" +
    "\064\042\055\001\002\000\024\003\uffd1\013\uffd1\021\uffd1" +
    "\022\uffd1\033\uffd1\036\uffd1\037\uffd1\041\uffd1\042\uffd1\001" +
    "\002\000\006\021\042\037\120\001\002\000\034\015\uffe3" +
    "\016\uffe3\020\uffe3\021\uffe3\023\uffe3\024\114\025\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\001\002" +
    "\000\032\015\uffdf\016\uffdf\020\uffdf\021\uffdf\023\uffdf\025" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\001\002\000\026\015\077\016\076\020\075\021\102\023" +
    "\uffce\031\uffce\032\100\033\073\034\103\035\074\001\002" +
    "\000\024\003\060\013\053\021\042\022\057\033\052\036" +
    "\062\037\065\041\064\042\055\001\002\000\006\027\111" +
    "\031\110\001\002\000\006\023\106\031\070\001\002\000" +
    "\024\003\uffd0\013\uffd0\021\uffd0\022\uffd0\033\uffd0\036\uffd0" +
    "\037\uffd0\041\uffd0\042\uffd0\001\002\000\024\003\060\013" +
    "\053\021\042\022\057\033\052\036\062\037\065\041\064" +
    "\042\055\001\002\000\032\015\uffdd\016\uffdd\020\uffdd\021" +
    "\uffdd\023\uffdd\025\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\001\002\000\036\015\uffcc\016\uffcc\020" +
    "\uffcc\021\uffcc\022\066\023\uffcc\024\uffcc\025\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\001\002\000" +
    "\030\003\060\013\053\021\042\022\057\023\uffcd\031\uffcd" +
    "\033\052\036\062\037\065\041\064\042\055\001\002\000" +
    "\006\023\071\031\070\001\002\000\024\003\060\013\053" +
    "\021\042\022\057\033\052\036\062\037\065\041\064\042" +
    "\055\001\002\000\032\015\uffde\016\uffde\020\uffde\021\uffde" +
    "\023\uffde\025\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\001\002\000\026\015\077\016\076\020\075" +
    "\021\102\023\uffcf\031\uffcf\032\100\033\073\034\103\035" +
    "\074\001\002\000\024\003\uffd9\013\uffd9\021\uffd9\022\uffd9" +
    "\033\uffd9\036\uffd9\037\uffd9\041\uffd9\042\uffd9\001\002\000" +
    "\024\003\uffd6\013\uffd6\021\uffd6\022\uffd6\033\uffd6\036\uffd6" +
    "\037\uffd6\041\uffd6\042\uffd6\001\002\000\024\003\uffd3\013" +
    "\uffd3\021\uffd3\022\uffd3\033\uffd3\036\uffd3\037\uffd3\041\uffd3" +
    "\042\uffd3\001\002\000\024\003\uffd4\013\uffd4\021\uffd4\022" +
    "\uffd4\033\uffd4\036\uffd4\037\uffd4\041\uffd4\042\uffd4\001\002" +
    "\000\024\003\uffd5\013\uffd5\021\uffd5\022\uffd5\033\uffd5\036" +
    "\uffd5\037\uffd5\041\uffd5\042\uffd5\001\002\000\024\003\uffd8" +
    "\013\uffd8\021\uffd8\022\uffd8\033\uffd8\036\uffd8\037\uffd8\041" +
    "\uffd8\042\uffd8\001\002\000\024\003\060\013\053\021\042" +
    "\022\057\033\052\036\062\037\065\041\064\042\055\001" +
    "\002\000\024\003\uffd2\013\uffd2\021\uffd2\022\uffd2\033\uffd2" +
    "\036\uffd2\037\uffd2\041\uffd2\042\uffd2\001\002\000\024\003" +
    "\uffd7\013\uffd7\021\uffd7\022\uffd7\033\uffd7\036\uffd7\037\uffd7" +
    "\041\uffd7\042\uffd7\001\002\000\032\015\077\016\076\020" +
    "\075\021\102\023\uffe2\025\uffe2\030\uffe2\031\uffe2\032\100" +
    "\033\073\034\103\035\074\001\002\000\032\015\077\016" +
    "\076\020\075\021\102\023\uffe1\025\uffe1\030\uffe1\031\uffe1" +
    "\032\100\033\073\034\103\035\074\001\002\000\004\030" +
    "\107\001\002\000\026\005\uffea\006\uffea\007\uffea\011\uffea" +
    "\012\uffea\014\uffea\021\uffea\026\uffea\027\uffea\037\uffea\001" +
    "\002\000\032\015\uffda\016\uffda\020\uffda\021\uffda\023\uffda" +
    "\025\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\001\002\000\032\015\uffdb\016\uffdb\020\uffdb\021\uffdb" +
    "\023\uffdb\025\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\001\002\000\024\015\077\016\076\020\075" +
    "\021\102\023\113\032\100\033\073\034\103\035\074\001" +
    "\002\000\032\015\uffe0\016\uffe0\020\uffe0\021\uffe0\023\uffe0" +
    "\025\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\001\002\000\024\003\060\013\053\021\042\022\057" +
    "\033\052\036\062\037\065\041\064\042\055\001\002\000" +
    "\024\015\077\016\076\020\075\021\102\025\116\032\100" +
    "\033\073\034\103\035\074\001\002\000\036\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\001" +
    "\002\000\034\015\uffdc\016\uffdc\020\uffdc\021\uffdc\023\uffdc" +
    "\024\114\025\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\001\002\000\034\015\uffcc\016\uffcc\020\uffcc" +
    "\021\uffcc\023\uffcc\024\uffcc\025\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\001\002\000\024\015\077" +
    "\016\076\020\075\021\102\030\122\032\100\033\073\034" +
    "\103\035\074\001\002\000\026\005\uffeb\006\uffeb\007\uffeb" +
    "\011\uffeb\012\uffeb\014\uffeb\021\uffeb\026\uffeb\027\uffeb\037" +
    "\uffeb\001\002\000\024\015\077\016\076\020\075\021\102" +
    "\030\124\032\100\033\073\034\103\035\074\001\002\000" +
    "\026\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\014\uffe8" +
    "\021\uffe8\026\uffe8\027\uffe8\037\uffe8\001\002\000\036\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\001\002\000\024\003\060\013\053\021\042\022\057" +
    "\033\052\036\062\037\065\041\064\042\055\001\002\000" +
    "\024\015\077\016\076\020\075\021\102\023\130\032\100" +
    "\033\073\034\103\035\074\001\002\000\022\005\041\007" +
    "\045\011\044\012\035\014\036\021\042\026\025\037\050" +
    "\001\002\000\026\005\uffee\006\132\007\uffee\011\uffee\012" +
    "\uffee\014\uffee\021\uffee\026\uffee\027\uffee\037\uffee\001\002" +
    "\000\022\005\041\007\045\011\044\012\035\014\036\021" +
    "\042\026\025\037\050\001\002\000\026\005\uffef\006\uffef" +
    "\007\uffef\011\uffef\012\uffef\014\uffef\021\uffef\026\uffef\027" +
    "\uffef\037\uffef\001\002\000\024\003\060\013\053\021\042" +
    "\022\057\033\052\036\062\037\065\041\064\042\055\001" +
    "\002\000\024\015\077\016\076\020\075\021\102\030\136" +
    "\032\100\033\073\034\103\035\074\001\002\000\026\005" +
    "\uffec\006\uffec\007\uffec\011\uffec\012\uffec\014\uffec\021\uffec" +
    "\026\uffec\027\uffec\037\uffec\001\002\000\024\003\060\013" +
    "\053\021\042\022\057\033\052\036\062\037\065\041\064" +
    "\042\055\001\002\000\024\015\077\016\076\020\075\021" +
    "\102\023\141\032\100\033\073\034\103\035\074\001\002" +
    "\000\022\005\041\007\045\011\044\012\035\014\036\021" +
    "\042\026\025\037\050\001\002\000\026\005\uffed\006\uffed" +
    "\007\uffed\011\uffed\012\uffed\014\uffed\021\uffed\026\uffed\027" +
    "\uffed\037\uffed\001\002\000\006\024\114\030\144\001\002" +
    "\000\026\005\uffe7\006\uffe7\007\uffe7\011\uffe7\012\uffe7\014" +
    "\uffe7\021\uffe7\026\uffe7\027\uffe7\037\uffe7\001\002\000\030" +
    "\004\ufff6\005\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014" +
    "\ufff6\021\ufff6\026\ufff6\027\ufff6\037\ufff6\001\002\000\006" +
    "\023\ufffc\031\ufffc\001\002\000\024\015\077\016\076\020" +
    "\075\021\102\025\150\032\100\033\073\034\103\035\074" +
    "\001\002\000\006\024\ufff2\037\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\004\002\003\001\001\000\010\003\004\010" +
    "\005\011\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\053\015\146\017\062\021\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\016\005\020\011\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\145\011\017\001\001\000\004\006\025\001\001\000\004" +
    "\007\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\031\011\032\012\030\001\001\000\012\006\037" +
    "\013\042\014\036\021\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\142\021\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\053\015\122\017\062\021\046\001\001\000" +
    "\012\014\053\015\120\017\062\021\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\014" +
    "\053\015\055\017\062\020\060\021\046\001\001\000\002" +
    "\001\001\000\006\014\116\021\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\100\001\001\000\012" +
    "\014\053\015\111\017\062\021\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\053" +
    "\015\104\017\062\021\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\053\015\055\017\062\020\066" +
    "\021\046\001\001\000\002\001\001\000\012\014\053\015" +
    "\071\017\062\021\046\001\001\000\002\001\001\000\004" +
    "\016\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\053\015\103\017\062\021\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\100" +
    "\001\001\000\004\016\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\100\001\001\000\002\001\001\000\012\014\053\015" +
    "\114\017\062\021\046\001\001\000\004\016\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\100\001\001\000\002\001\001\000\004\016\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\053\015\126\017\062\021\046\001\001\000\004\016\100" +
    "\001\001\000\012\006\037\013\130\014\036\021\046\001" +
    "\001\000\002\001\001\000\012\006\037\013\132\014\036" +
    "\021\046\001\001\000\002\001\001\000\012\014\053\015" +
    "\134\017\062\021\046\001\001\000\004\016\100\001\001" +
    "\000\002\001\001\000\012\014\053\015\137\017\062\021" +
    "\046\001\001\000\004\016\100\001\001\000\012\006\037" +
    "\013\141\014\036\021\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\100\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;
  protected MultiTree syntaxTree = new MultiTree();

	public MultiTree getSyntaxTree()
	{
		return syntaxTree;
 	}
	protected MultiTreeNode createFunctionDeclarationNode(MultiTreeNode typeSpecifier, String name, MultiTreeNode paramsList, MultiTreeNode block){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createListNode(String listName, MultiTreeNode firstChild){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createVarDeclaration(MultiTreeNode typeSpecifier, String identifierName){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createTypeSpecifier(String typeName){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createTypeSpecifier(MultiTreeNode type,MultiTreeNode expression){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createBlock(MultiTreeNode declarations, MultiTreeNode instructions){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createIfStatement(MultiTreeNode condition, MultiTreeNode ifInstructions, MultiTreeNode elseInstructions){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createStatementList(String indicator, String name, MultiTreeNode stm){ throw new UnsupportedOperationException();} 	
	protected MultiTreeNode createStatement(String name, MultiTreeNode ex, MultiTreeNode stm){ throw new UnsupportedOperationException();} 	
	protected MultiTreeNode createReturnStatement(MultiTreeNode exp){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createBlockStatement(MultiTreeNode exp){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createInOutStatement(String ioOP, MultiTreeNode exp){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createLExpression(MultiTreeNode lexp, MultiTreeNode exp){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createExpression(MultiTreeNode lexp, MultiTreeNode operation,MultiTreeNode ex){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createUExpression(MultiTreeNode operation,MultiTreeNode ex){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createInstance(Integer instance){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createInstance(String instance){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createOperation(String operation){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createVariable(String name){ throw new UnsupportedOperationException();}
	protected MultiTreeNode createErrorNode(String errorMessage){ throw new UnsupportedOperationException();}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program var_declaration 
            {
              MultiTreeNode RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode p = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location var_dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location var_dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode var_d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 RESULT = p; syntaxTree.addChildNode(var_d);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode start_val = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program fun_declaration 
            {
              MultiTreeNode RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode p = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location fn_dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fn_dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fn_d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4
 RESULT = p; syntaxTree.addChildNode(fn_d);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG5
 RESULT = syntaxTree.create("Program");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fun_declaration ::= type NAME LPAR param_list RPAR block 
            {
              MultiTreeNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		MultiTreeNode t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location for_parxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location for_parxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode for_par = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location blkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode blk = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
RESULT = createFunctionDeclarationNode(t,name,for_par,blk);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // param_list ::= param_list COMMA formal_par 
            {
              MultiTreeNode RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode pl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location fpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fp = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
RESULT = pl;RESULT.addChild(fp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // param_list ::= formal_par 
            {
              MultiTreeNode RESULT =null;
		Location fpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fp = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
RESULT = createListNode("Parameter List", fp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formal_par ::= type NAME 
            {
              MultiTreeNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9
RESULT = createVarDeclaration(t,name);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_par",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // block ::= LBRACE var_delcaration_list statements RBRACE 
            {
              MultiTreeNode RESULT =null;
		Location vadlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vadlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode vadl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode st = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG10
RESULT = createBlock(vadl,st);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_delcaration_list ::= var_delcaration_list var_declaration 
            {
              MultiTreeNode RESULT =null;
		Location vadlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vadlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode vadl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location vadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode vad = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
RESULT = vadl;RESULT.addChild(vad);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_delcaration_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_delcaration_list ::= 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG12
RESULT = createListNode("VarDeclarations",null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_delcaration_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_delcaration_list ::= error SEMICOLON 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG13
RESULT = createErrorNode("error: Var Dec");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_delcaration_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_declaration ::= type NAME SEMICOLON 
            {
              MultiTreeNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG14
RESULT = createVarDeclaration(t,name);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= INT 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG15
RESULT = createTypeSpecifier("INT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= CHAR 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG16
RESULT = createTypeSpecifier("CHAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= type LBRACK exp RBRACK 
            {
              MultiTreeNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		MultiTreeNode t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG17
RESULT = createTypeSpecifier(t,ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statements ::= statements statement 
            {
              MultiTreeNode RESULT =null;
		Location stmsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stmsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode stms = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode stm = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
RESULT = stms;RESULT.addChild(stm);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statements ::= 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG19
RESULT = createListNode("StatementsList",null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= IF LPAR exp RPAR statement ELSE statement 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode stm = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stm1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stm1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode stm1 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG20
RESULT = createIfStatement(ex,stm,stm1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= IF LPAR exp RPAR statement 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode stm = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21
RESULT = createIfStatement(ex,stm,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= WHILE LPAR exp RPAR statement 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode stm = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22
RESULT = createStatement("WHILE",ex,stm);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= lexp ASSIGN exp SEMICOLON 
            {
              MultiTreeNode RESULT =null;
		Location lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		MultiTreeNode lex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG23
RESULT = createStatement("Assign",lex,ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= RETURN exp SEMICOLON 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG24
RESULT = createReturnStatement(ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= NAME LPAR exp_list RPAR SEMICOLON 
            {
              MultiTreeNode RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode exl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG25
RESULT = createStatementList("StatementList",name,exl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= block 
            {
              MultiTreeNode RESULT =null;
		Location blkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode blk = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26
RESULT = createBlockStatement(blk);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= WRITE exp SEMICOLON 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG27
RESULT = createInOutStatement("WRITE",ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= READ lexp SEMICOLON 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG28
RESULT = createInOutStatement("READ",ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lexp ::= var 
            {
              MultiTreeNode RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode v = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29
RESULT = createLExpression(v,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lexp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lexp ::= lexp LBRACK exp RBRACK 
            {
              MultiTreeNode RESULT =null;
		Location lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		MultiTreeNode lex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG30
RESULT = createLExpression(lex,ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lexp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lexp ::= LESS error 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG31
RESULT = createErrorNode("error: Left Exp");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lexp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= lexp 
            {
              MultiTreeNode RESULT =null;
		Location lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode lex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32
RESULT = createExpression(lex,null,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp binop exp 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode bop = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ex1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ex1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ex1 = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33
RESULT = createExpression(ex,bop,ex1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= unop exp 
            {
              MultiTreeNode RESULT =null;
		Location uopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location uopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode uop = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34
RESULT = createUExpression(uop,ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= LPAR exp RPAR 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG35
RESULT = createExpression(ex, null,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= NUMBER 
            {
              MultiTreeNode RESULT =null;
		Location numberxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location numberxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36
RESULT = createInstance(number);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= NAME LPAR exp_list RPAR 
            {
              MultiTreeNode RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode exl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG37
RESULT = createStatementList("ExpressionList",name,exl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= QCHAR 
            {
              MultiTreeNode RESULT =null;
		Location qcharxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location qcharxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String qchar = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
RESULT = createInstance(qchar);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= LENGTH lexp 
            {
              MultiTreeNode RESULT =null;
		Location lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode lex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG39
RESULT = createUExpression(null,lex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= error RBRACE 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG40
RESULT = createErrorNode("error: exp '}'");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= error COMMA 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG41
RESULT = createErrorNode("error: exp ','");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // binop ::= MINUS 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG42
RESULT = createOperation("MINUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // binop ::= PLUS 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG43
RESULT = createOperation("PLUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // binop ::= TIMES 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG44
RESULT = createOperation("TIMES");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // binop ::= DIVIDE 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG45
RESULT = createOperation("DIVIDE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // binop ::= EQUAL 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG46
RESULT = createOperation("EQUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // binop ::= NEQUAL 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG47
RESULT = createOperation("NEQUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // binop ::= GREATER 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG48
RESULT = createOperation("GREATER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // binop ::= LESS 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG49
RESULT = createOperation("LESS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unop ::= MINUS 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG50
RESULT = createOperation("MINUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unop ::= NOT 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG51
RESULT = createOperation("NOT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp_list ::= exp_list COMMA exp 
            {
              MultiTreeNode RESULT =null;
		Location exlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		MultiTreeNode exl = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52
RESULT = exl; RESULT.addChild(ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp_list ::= exp 
            {
              MultiTreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ex = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG53
RESULT = createListNode("VarDeclarations",ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp_list ::= 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG54
RESULT = createListNode("VarDeclarations",null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var ::= NAME 
            {
              MultiTreeNode RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG55
RESULT = createVariable(name);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
